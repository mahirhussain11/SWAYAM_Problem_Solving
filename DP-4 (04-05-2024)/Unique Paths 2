//Memoization
class Solution {
public:
    int helper(int i, int j, vector<vector<int>>& mat,vector<vector<int>>&dp){
        if(i<0 || j<0 || mat[i][j]==1)return 0;
        if(i==0 && j==0)return 1;
        if(dp[i][j]!=-1)return dp[i][j];
        int left=helper(i,j-1,mat,dp);
        int up=helper(i-1,j,mat,dp);
        return dp[i][j]=left+up;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& mat) {
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return helper(m-1,n-1,mat,dp);
    }
};

//Tabulation
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& mat) {
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if( mat[i][j]==1)continue;
                if(i==0 && j==0){
                    dp[0][0]=1;
                    continue;
                }
                 int left=0;
                 int up=0;
                 if(j>0)left=dp[i][j-1];
                 if(i>0)up=dp[i-1][j];
                 dp[i][j]=left+up;
            }
        }
        return dp[m-1][n-1];
    }
};
