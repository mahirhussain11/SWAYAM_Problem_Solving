//Memoization
class Solution {
public:
    int helper(int idx,vector<int>&nums,int target, vector<vector<int>>&dp){
        if(target==0)return 0;
        if(idx==0){
            if(nums[0]==target)return 1;
            else return -1e9;
        }
        if(dp[idx][target]!=-1)return dp[idx][target];
        int not_take=helper(idx-1,nums,target,dp);
        int take=-1e9;
        if(nums[idx]<=target)take=1+helper(idx-1,nums,target-nums[idx],dp);
        return dp[idx][target]=max(take,not_take);
    }
    int lengthOfLongestSubsequence(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        int ans= helper(n-1,nums,target,dp);
        if(ans<0)return -1;
        else return ans;
    }
};

//Tabulation
class Solution {
public:
    int lengthOfLongestSubsequence(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1e9));
        if(n==1){
            if(nums[0]==target)return 1;
            else return -1;
        }
        for(int i=0;i<=n;i++){
            dp[i][0]=0;
        }
        for(int idx=n-1;idx>=0;idx--){
            for(int t=1;t<=target;t++){
                 int not_take=dp[idx+1][t];
                 int take=-1e9;
                 if(t>=nums[idx])take=1+dp[idx+1][t-nums[idx]];
                 dp[idx][t]=max(take,not_take);
            }
        }
        if(dp[0][target]<0)return -1;
        else return dp[0][target];
       
    }
};
