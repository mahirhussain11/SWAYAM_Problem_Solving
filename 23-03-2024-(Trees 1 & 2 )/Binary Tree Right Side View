I- Using Recursion
class Solution {
public:
    void helper(TreeNode* root, vector<int>&ans, int level){
        if(root==NULL)return ;
        if(level==ans.size())ans.push_back(root->val);
        helper(root->right,ans,level+1);
        helper(root->left,ans,level+1);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int>ans;
        helper(root,ans,0);
        return ans;
    }
};

II- Using level order traversal
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*>pq;
        pq.push(root);
        vector<int>ans;
        if(root==NULL)return ans;
        while(!pq.empty()){
            int size=pq.size();
            while(size--){
                 TreeNode* curr=pq.front();
                 pq.pop();
                 if(size==0)ans.push_back(curr->val);
                 if(curr->left)pq.push(curr->left);
                 if(curr->right)pq.push(curr->right);
            }
        }
        return ans;
    }
};
