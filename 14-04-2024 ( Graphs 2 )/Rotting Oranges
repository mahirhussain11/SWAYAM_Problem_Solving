class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        queue< pair < pair<int,int> , int > > pq;
        vector<vector<int>>vis(m,vector<int>(n,0));
        int t=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    pq.push({{i,j},0});
                    vis[i][j]=2;
                }
            }
        }
        int rw[]={-1,0,1,0};
        int rc[]={0,1,0,-1};
        while(!pq.empty()){
            int row=pq.front().first.first;
            int col=pq.front().first.second;
            int time=pq.front().second;
            pq.pop();
            t=max(t,time);
            for(int i=0;i<4;i++){
                int nrw=row+rw[i];
                int ncl=col+rc[i];
                if(nrw>=0 && nrw<m && ncl>=0 && ncl<n && vis[nrw][ncl]!=2 && grid[nrw][ncl]==1){
                    pq.push({{nrw,ncl},time+1});
                    vis[nrw][ncl]=2;
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && vis[i][j]!=2)return -1; 
            }
        }
        return t;
    }
};
