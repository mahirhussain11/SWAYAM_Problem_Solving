int Solution::knight(int A, int B, int C, int D, int E, int F) {
    int sx=C-1;
    int sy=D-1;
    int dx=E-1;
    int dy=F-1;
    if(sx==dx && sy==dy)return 0;
     vector<vector<int>>vis(A,vector<int>(B,0));
	    queue< pair<pair<int,int>,int > > pq;
	    pq.push({{sx,sy},0});
	    vis[sx][sy]=1;
	    int dr[]={-2,-2,-1,-1,1,1,2,2};
	    int dc[]={-1,1,-2,2,-2,2,1,-1};
	    while(!pq.empty()){
	        int r=pq.front().first.first;
	        int c=pq.front().first.second;
	        int d=pq.front().second;
	        pq.pop();
	        if(r==dx && c==dy)return d;
	        for(int i=0;i<8;i++){
	            int nr=r+dr[i];
	            int nc=c+dc[i];
	            if(nr>=0 && nr<A && nc>=0 && nc<B && !vis[nr][nc]){
	                vis[nr][nc]=1;
	                pq.push({{nr,nc},d+1});
	            }
	        }
	    }
	    return -1;
}
