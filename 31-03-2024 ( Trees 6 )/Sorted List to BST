Method I -
class Solution {
public:
    TreeNode* helper(vector<int>&v){
        if(v.size()==0)return NULL;
        int mid=v.size()/2;
        TreeNode* newnode=new TreeNode(v[mid]);
        vector<int>left_part(v.begin(),v.begin()+mid);
        vector<int>right_part(v.begin()+mid+1,v.end());
        newnode->left=helper(left_part);
        newnode->right=helper(right_part);
        return newnode;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int>v;
        while(head!=NULL){
            v.push_back(head->val);
            head=head->next;
        }
        return helper(v);
    }
};

Method II-
class Solution {
public:
    
    ListNode* middle(ListNode* start,ListNode* end){
        ListNode* slow=start;
        ListNode* fast=start;
        while(fast!=end && fast->next!=end && fast->next->next!=end){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;

    }
    TreeNode* buildTree(ListNode* start, ListNode* end){
       if(start==end)return NULL;
       ListNode* mid=middle(start,end);
       TreeNode* newnode=new TreeNode(mid->val);
       newnode->left=buildTree(start,mid);
       newnode->right=buildTree(mid->next,end);
       return newnode;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        return buildTree(head,NULL);
    }
};
