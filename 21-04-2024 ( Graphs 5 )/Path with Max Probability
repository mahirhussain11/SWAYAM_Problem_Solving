class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& p, int s, int e) {
        vector<vector< pair<int,double>> > adj_list(n);
        for(int i=0;i<edges.size();i++){
            int a=edges[i][0];
            int b=edges[i][1];
            double pb=p[i];
            adj_list[a].push_back({b,pb});
            adj_list[b].push_back({a,pb});
        }
        priority_queue< pair<double,int> > pq;
        pq.push({1.0,s});
        vector<double>res(n,0);
        res[s]=1;
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            double prob=it.first;
            int node=it.second;
            for(auto it:adj_list[node]){
                int next_node=it.first;
                double prob2=it.second;
                if(res[next_node]<prob*prob2){
                    res[next_node]=prob*prob2;
                    pq.push({res[next_node],next_node});
                }
            }
        }
        return res[e];
    }
};
