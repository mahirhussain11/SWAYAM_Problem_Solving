class Solution {
public:
   
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        vector<vector<int>>res(m,vector<int>(n,INT_MAX));
        priority_queue< pair<int,pair<int,int>> , vector< pair<int,pair<int,int>> > , greater< pair<int,pair<int,int>> > > pq;
        res[0][0]=0;
        vector<vector<int>>dirs={{-1,0},{0,1},{1,0},{0,-1}};
        pq.push({0,{0,0}});
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int abs_diff=it.first;
            int x=it.second.first;
            int y=it.second.second;
            for(auto it:dirs){
                int new_x=x+it[0];
                int new_y=y+it[1];
                if(new_x>=0 && new_x<m && new_y>=0 && new_y<n){
                    int curr_diff=abs(heights[new_x][new_y]-heights[x][y]);
                    int max_diff=max(abs_diff,curr_diff);
                    if(res[new_x][new_y]>max_diff){
                        res[new_x][new_y]=max_diff;
                        pq.push({max_diff,{new_x,new_y}});
                    }
                }
            }
        }
        return res[m-1][n-1];
    }
};
