class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        vector<vector<pair<int,int>>>adj_list(n);
        for(auto it:edges){
            int a=it[0],b=it[1],l=it[2];
            adj_list[a].push_back({b,l});
            adj_list[b].push_back({a,l});
        }
        priority_queue< pair<int,int> , vector<pair<int,int>> , greater<pair<int,int>> > pq;
        vector<bool>vis(n,false);
        vector<int>res(n,-1);
        pq.push({0,0});
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int time=it.first;
            int node=it.second;
            if(vis[node] || time>=disappear[node])continue;
            vis[node]=true;
            if(res[node]==-1)res[node]=time;
            else res[node]=min(res[node],time);
            for(auto it:adj_list[node]){
                int curr=it.first;
                int time2=it.second;
                if(vis[curr] || time+time2>=disappear[curr])continue;
                pq.push({time+time2,curr});
            }
        }
        return res;

    }
};
