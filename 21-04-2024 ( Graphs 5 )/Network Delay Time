class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector< pair<int,int> > >adj_list(n+1);
        for(auto it:times){
            int a=it[0];
            int b=it[1];
            int time=it[2];
            adj_list[a].push_back({b,time});
        }
        vector<int>res(n+1,INT_MAX);
        priority_queue< pair<int,int> ,  vector< pair<int,int> > , greater< pair<int,int> > > pq;
        pq.push({0,k});
        res[k]=0;
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int node=it.second;
            int time=it.first;
            for(auto it:adj_list[node]){
                int next_node=it.first;
                int time2=it.second;
                if(res[next_node]>time+time2){
                    res[next_node]=time+time2;
                    pq.push({res[next_node],next_node});
                }
            }
        }
        int ans=INT_MIN;
        for(int i=1;i<=n;i++){
            ans=max(ans,res[i]);
        }
        if(ans==INT_MAX)return -1;
        else return ans;
    }
};
