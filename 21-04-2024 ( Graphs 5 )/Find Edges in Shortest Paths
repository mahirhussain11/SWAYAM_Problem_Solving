class Solution {
public:
    vector<int> helper( vector<vector<pair<int,int>>>&adj_list, int S,int n)
    {
        // Code here
        priority_queue<pair<int,int>,vector< pair<int,int> >,greater< pair<int,int> > >pq;
        vector<int>dist(n);
        for(int i=0;i<n;i++){
            dist[i]=1e9;
        }
        dist[S]=0;
        pq.push({0,S});
        while(!pq.empty()){
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj_list[node]){
                int edgeWeight=it.second;
                int adjNode=it.first;
                if(dis+edgeWeight<dist[adjNode]){
                    dist[adjNode]=dis+edgeWeight;
                    pq.push({dist[adjNode],adjNode});
                }
                
            }
        }
        return dist;
        
    }
    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>>adj_list(n);
        for(auto it:edges){
            int a=it[0];
            int b=it[1];
            int w=it[2];
            adj_list[a].push_back({b,w});
            adj_list[b].push_back({a,w});
        }
        vector<int>s_e=helper(adj_list,0,n);
        vector<int>e_s=helper(adj_list,n-1,n);
        vector<bool>res(edges.size(),false);
        for(int i=0;i<edges.size();i++){
            int a=edges[i][0];
            int b=edges[i][1];
            int w=edges[i][2];
            if(s_e[a]+w+e_s[b]==s_e[n-1])res[i]=true;
            else if(s_e[b]+w+e_s[a]==s_e[n-1])res[i]=true;
        }
        return res;
    }
};
