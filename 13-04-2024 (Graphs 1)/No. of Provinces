class Solution {
public:
    void dfs_helper(int i,vector<int>&vis,vector<vector<int>>&adj_list){
        vis[i]=1;
        for(auto it:adj_list[i]){
            if(!vis[it]){
                vis[it]=1;
                dfs_helper(it,vis,adj_list);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<vector<int>>adj_list(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj_list[i].push_back(j);
                    adj_list[j].push_back(i);
                }
            }
        }
        int ans=0;
        vector<int>vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                ans++;
                dfs_helper(i,vis,adj_list);
            }
        }
        return ans;
    }
};
