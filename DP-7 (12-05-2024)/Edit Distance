/*Memoization
  class Solution {
public:
    int helper(int i, int j, string& word1,string& word2,vector<vector<int>>&dp){
        if(i<0)return j+1;//insert operations
        if(j<0)return i+1;//delete operations
        if(dp[i][j]!=-1)return dp[i][j];
        if(word1[i]==word2[j])return dp[i][j]=helper(i-1,j-1,word1,word2,dp);
        int ins=1+helper(i,j-1,word1,word2,dp);
        int del=1+helper(i-1,j,word1,word2,dp);
        int rep=1+helper(i-1,j-1,word1,word2,dp);
        return dp[i][j]=min(ins,min(del,rep));

    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return helper(m-1,n-1,word1,word2,dp);
    }
};
*/
/*Tabulation
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<=m;i++){
            dp[i][0]=i;
        }
        for(int j=0;j<=n;j++){
            dp[0][j]=j;
        }
        for(int idx1=1;idx1<=m;idx1++){
            for(int idx2=1;idx2<=n;idx2++){
                if(word1[idx1-1]==word2[idx2-1])dp[idx1][idx2]=dp[idx1-1][idx2-1];
                else dp[idx1][idx2]=1+min(dp[idx1-1][idx2-1],min(dp[idx1-1][idx2],dp[idx1][idx2-1]));
            }
        }
        return dp[m][n];
    }
};
*/
//Space optimization
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<int>prev(n+1,0);
        vector<int>curr(n+1,0);
        for(int j=0;j<=n;j++){
            prev[j]=j;
        }
        for(int i=1;i<=m;i++){
            curr[0]=i;
            for(int j=1;j<=n;j++){
                if(word1[i-1]==word2[j-1]){
                    curr[j]=prev[j-1];
                }
                else{
                    curr[j]=1+min(prev[j-1],min(prev[j],curr[j-1]));
                }
            }
            prev=curr;
        }
        return prev[n];
    }
};
