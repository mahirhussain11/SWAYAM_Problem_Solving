/*Method1 - Tabulation
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size();
        int n=dungeon[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        if(dungeon[m-1][n-1]<=0)dp[m-1][n-1]=abs(dungeon[m-1][n-1])+1;
        else dp[m-1][n-1]=1;
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i==m-1 && j==n-1){
                      if(dungeon[i][j]<=0)dp[i][j]=abs(dungeon[i][j])+1;
                      else dp[i][j]=1;
                }
                else if(dungeon[i][j]<=0){
                     int x=INT_MAX;
                     int y=INT_MAX;
                     if(i+1<m)x=dp[i+1][j];
                     if(j+1<n)y=dp[i][j+1];
                     dp[i][j]=abs(dungeon[i][j])+min(x,y);
                }
                else {
                    int x=INT_MAX;
                     int y=INT_MAX;
                     if(i+1<m)x=dp[i+1][j];
                     if(j+1<n)y=dp[i][j+1];
                     dp[i][j]=max( 1,  min(x,y)-dungeon[i][j] );
                }
            }
        }
        return dp[0][0];
    }
};
*/
//Method2 - Memoization
class Solution {
public:
    int helper(int i,int j,int m, int n, vector<vector<int>>& dungeon, vector<vector<int>>&dp){
        if(i>=m || j>=n)return INT_MAX;
        if(i==m-1 && j==n-1){
            if(dungeon[i][j]<=0)return (abs(dungeon[i][j])+1);
            else return 1;
        }
        if(dp[i][j]!=-1)return dp[i][j];
        int x=helper(i+1,j,m,n,dungeon,dp);
        int y=helper(i,j+1,m,n,dungeon,dp);
        if(dungeon[i][j]<=0){
              return dp[i][j]=abs(dungeon[i][j])+min(x,y);
        }
        else{
              return dp[i][j]=max(1, min(x,y)-dungeon[i][j]);
        }
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size();
        int n=dungeon[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return helper(0,0,m,n,dungeon,dp);
    }
};
