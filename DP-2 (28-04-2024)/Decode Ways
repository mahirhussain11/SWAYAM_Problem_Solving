//Memoization-
class Solution {
public:
    int helper(int idx,int n, string& s, vector<int>&dp){
        if(s[idx]=='0')return 0;
        if(idx==n)return 1;
        if(dp[idx]!=-1)return dp[idx];
        int one=helper(idx+1,n,s,dp);
        int two=0;
        if(idx<n-1 && (s[idx]=='1' || s[idx]=='2' && s[idx+1]<='6'))two=helper(idx+2,n,s,dp);
        return dp[idx]=one+two;
    }
    int numDecodings(string s) {
        int n=s.size();
        vector<int>dp(n+1,-1);
        return helper(0,n,s,dp);
    }
};
----------------------
//Tabulation
 int numDecodings(string s) {
        int n=s.size();
        vector<int>dp(n+1,0);
        dp[n]=1;
        for(int idx=n-1;idx>=0;idx--){
            if(s[idx]=='0')dp[idx]=0;
            else{
                dp[idx]=dp[idx+1];
                if(idx<n-1 && (s[idx]=='1' || s[idx]=='2' && s[idx+1]<='6'))dp[idx]+=dp[idx+2];

            }
        }
        return dp[0];
    }
-------------------------------


//Space opt.
 int numDecodings(string s) {
        int n=s.size();
        if(n==0 || s[0]=='0')return 0;
        int one=1;
        int two=1;
        for(int idx=1;idx<n;idx++){
             int curr=0;
             if(s[idx]!='0')curr+=one;
             if(s[idx-1]=='1' || s[idx-1]=='2' && s[idx]<='6')curr+=two;
             two=one;
             one=curr;


        }
        return one;
    }
