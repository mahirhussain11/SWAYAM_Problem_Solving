class TrieNode{
   public:
   TrieNode* children[26];
   bool isEnd;
   TrieNode(){
    for(int i=0;i<26;i++){
        children[i]=NULL;
    }
    isEnd=false;
   }
};
class Solution {
public:
    TrieNode* root;
    void insert(string& s){
        TrieNode* curr=root;
        for(char c:s){
            if(curr->children[c-'a']==NULL)curr->children[c-'a']=new TrieNode();
            curr=curr->children[c-'a'];
        }
        curr->isEnd=true;
    }
    string helper(string& word){
        TrieNode* curr=root;
        string ans="";
        for(char c:word){
            if(curr->children[c-'a']==NULL)break;
            ans+=c;
            curr=curr->children[c-'a'];
            if(curr->isEnd==true)return ans;
        }
        return word;
    }
    string replaceWords(vector<string>& dictionary, string sentence) {
        root=new TrieNode();
        for(auto it:dictionary){
            insert(it);
        }
        string ans="";
        vector<string>words;
        stringstream s(sentence);
        string word;
        while(s>>word){
            words.push_back(word);
        }
        for(auto it:words){
            ans+=helper(it);
            ans+=" ";
        }
        ans.pop_back();
        return ans;
    }
};
