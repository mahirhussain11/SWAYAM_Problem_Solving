struct Trie{
    Trie* children[2];
    Trie(){
    children[0]=NULL;
    children[1]=NULL;
    }
};
class TrieNode{
    private:
    Trie* root;
    public:
    TrieNode(){
        root=new Trie();
    }
    void insert(int num){
        Trie* curr=root;
        for(int i=31;i>=0;i--){
            int curr_bit=(num>>i)&1;
            if(curr->children[curr_bit]==NULL){
                curr->children[curr_bit]=new Trie();
            }
            curr=curr->children[curr_bit];
        }
    }
    int max_xor(int num){
        int ans=0;
        Trie* curr=root;
        for(int i=31;i>=0;i--){
            int curr_bit=(num>>i)&1;
            if(curr->children[!curr_bit]){
                ans+=(1<<i);
                curr=curr->children[!curr_bit];
            }
            else{
                curr=curr->children[curr_bit];
            }
        }
        return ans;
    }
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        int res=INT_MIN;
        TrieNode* root=new TrieNode();
        int n=nums.size();
        for(int i=0;i<n;i++){
            root->insert(nums[i]);
        }
        for(int i=0;i<n;i++){
            res=max(res,root->max_xor(nums[i]));
        }
        return res;
    }
};
