class Solution {
public:
     int helper(int V, vector<vector<pair<int,int>>>&adj)
    {
        priority_queue< pair<int,int> ,vector< pair<int,int>>,greater<pair<int,int>>>pq;
        int sum=0;
        vector<int>vis(V,0);
        pq.push({0,0});
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int node=it.second;
            int wt=it.first;
            if(vis[node])continue;
            vis[node]=1;
            sum+=wt;
            for(auto it2:adj[node]){
                int next_node=it2.first;
                int wt2=it2.second;
                if(!vis[next_node]){
                    pq.push({wt2,next_node});
                }
            }
        }
        return sum;
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n=points.size();
        vector<vector<pair<int,int>>>adj(n);
        for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
        int dist=abs(points[j][0]-points[i][0]) + abs(points[j][1]-points[i][1]);
        adj[i].push_back({j, dist});
        adj[j].push_back({i, dist});
    }
    }

    return helper(n,adj);
    }
};
