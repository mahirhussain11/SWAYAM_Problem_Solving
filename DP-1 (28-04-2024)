//Memoization
/*
class Solution {
public:
    int helper(int n,vector<int>&dp){
        if(n==0)return 1;
        if(n<0)return 0;
        if(dp[n]!=-1)return dp[n];
        int one=helper(n-1,dp);
        int two=helper(n-2,dp);
        return dp[n]=one+two;
    }
    int climbStairs(int n) {
        vector<int>dp(n+1,-1);
        return helper(n,dp);
    }
};
*/
//Tabulation
/*
class Solution {
public:
    int climbStairs(int n) {
        vector<int>dp(n+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++){
            dp[i]=dp[i-1];
            if(i-2>=0)dp[i]+=dp[i-2];
        }
        return dp[n];
    }
};
*/
//Space opt.
class Solution {
public:
    int climbStairs(int n) {
        if(n==1)return 1;
        int prev1=1;
        int prev2=1;
        for(int i=2;i<=n;i++){
            int curr=prev1+prev2;
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
        
    }
};
