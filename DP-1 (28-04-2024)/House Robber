//Tabulation
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1,0);
        if(n==1)return nums[0];
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<n;i++){
            dp[i]=max(dp[i-1],nums[i]+dp[i-2]);
        }
        return dp[n-1];
    }
};

//Memoization
class Solution {
public:
    int helper(int idx,int n,vector<int>&nums,vector<int>&dp){
        if(idx>=n)return 0;
        if(dp[idx]!=-1)return dp[idx];
        int op1=helper(idx+1,n,nums,dp);
        int op2=nums[idx]+helper(idx+2,n,nums,dp);
        return dp[idx]=max(op1,op2);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        return helper(0,n,nums,dp);
    }
};
