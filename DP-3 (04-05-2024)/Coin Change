//Memoization
class Solution {
public:
    int helper(int idx,vector<int>&coins,int amount,vector<vector<int>>&dp){
        if(idx==0){
            if(amount%coins[0]==0)return amount/coins[0];
            else return 1e9;
        }
        if(dp[idx][amount]!=-1)return dp[idx][amount];
        int not_take=helper(idx-1,coins,amount,dp);
        int take=INT_MAX;
        if(coins[idx]<=amount)take=1+helper(idx,coins,amount-coins[idx],dp);
        return dp[idx][amount]=min(take,not_take);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        int ans=helper(n-1,coins,amount,dp);
        if(ans==1e9)return -1;
        else return ans;
    }
};

//Tabulation-
 int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n+1,vector<int>(amount+1,0));
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0)dp[0][i]=i/coins[0];
            else dp[0][i]=1e9;
        }
        for(int idx=1;idx<n;idx++){
             for(int t=0;t<=amount;t++){
             int not_take=dp[idx-1][t];
             int take=INT_MAX;
            if(coins[idx]<=t)take=1+dp[idx][t-coins[idx]];
             dp[idx][t]=min(take,not_take);
             }
        }
        int ans=dp[n-1][amount];
        if(ans==1e9)return -1;
        else return ans;
    }

//Space opt.
 int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<int>prev(amount+1,0);
        vector<int>curr(amount+1,0);
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0)prev[i]=i/coins[0];
            else prev[i]=1e9;
        }
        for(int idx=1;idx<n;idx++){
            for(int t=0;t<=amount;t++){
                 int not_take=prev[t];
                 int take=INT_MAX;
                 if(coins[idx]<=t)take=1+curr[t-coins[idx]];
                 curr[t]=min(take,not_take);
            }
            prev=curr;
        }
        int ans=prev[amount];
        if(ans==1e9)return -1;
        else return ans;
    }
