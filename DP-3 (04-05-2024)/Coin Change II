//Memoization
class Solution {
public:
    int helper(int idx,int amount,vector<int>&coins,vector<vector<int>>&dp){
        if(amount==0)return 1;
        if(idx==0){
            if(amount%coins[0]==0)return 1;
            else return 0;
        }
        if(dp[idx][amount]!=-1)return dp[idx][amount];
        int not_take=helper(idx-1,amount,coins,dp);
        int take=0;
        if(coins[idx]<=amount)take=helper(idx,amount-coins[idx],coins,dp);
        return dp[idx][amount]=take+not_take;
    }
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        return helper(n-1,amount,coins,dp);
    }
};


//Tabulation
class Solution {
public:
    
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n+1,vector<int>(amount+1,0));
        for(int t=0;t<=amount;t++){
            if(t%coins[0]==0)dp[0][t]=1;
        }
        for(int idx=1;idx<n;idx++){
            for(int t=0;t<=amount;t++){
                int not_take=dp[idx-1][t];
                int take=0;
                if(coins[idx]<=t)take=dp[idx][t-coins[idx]];
                dp[idx][t]=take+not_take;
            }
        }
        return dp[n-1][amount];
        

    }
};

//Space optimized
class Solution {
public:
    
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<int>prev(amount+1,0);
        vector<int>curr(amount+1,0);
        for(int t=0;t<=amount;t++){
            if(t%coins[0]==0)prev[t]=1;
        }
        for(int idx=1;idx<n;idx++){
            for(int t=0;t<=amount;t++){
                int not_take=prev[t];
                int take=0;
                if(coins[idx]<=t)take=curr[t-coins[idx]];
                curr[t]=take+not_take;
            }
            prev=curr;
        }
        return prev[amount];
        

    }
};
